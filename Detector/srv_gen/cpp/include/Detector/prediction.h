/* Auto-generated by genmsg_cpp for file /home/grega/ros_workspace/human_detection_and_tracking_system/Detector/srv/prediction.srv */
#ifndef DETECTOR_SERVICE_PREDICTION_H
#define DETECTOR_SERVICE_PREDICTION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "geometry_msgs/Vector3.h"

namespace Detector
{
template <class ContainerAllocator>
struct predictionRequest_ {
  typedef predictionRequest_<ContainerAllocator> Type;

  predictionRequest_()
  : str()
  {
  }

  predictionRequest_(const ContainerAllocator& _alloc)
  : str(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _str_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  str;


private:
  static const char* __s_getDataType_() { return "Detector/predictionRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "994972b6e03928b2476860ce6c4c8e17"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "e6cc5d1c76477e8379a859ec77194d1d"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string str\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, str);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, str);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(str);
    return size;
  }

  typedef boost::shared_ptr< ::Detector::predictionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Detector::predictionRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct predictionRequest
typedef  ::Detector::predictionRequest_<std::allocator<void> > predictionRequest;

typedef boost::shared_ptr< ::Detector::predictionRequest> predictionRequestPtr;
typedef boost::shared_ptr< ::Detector::predictionRequest const> predictionRequestConstPtr;


template <class ContainerAllocator>
struct predictionResponse_ {
  typedef predictionResponse_<ContainerAllocator> Type;

  predictionResponse_()
  : prediction()
  {
  }

  predictionResponse_(const ContainerAllocator& _alloc)
  : prediction(_alloc)
  {
  }

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _prediction_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  prediction;


private:
  static const char* __s_getDataType_() { return "Detector/predictionResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "6931b22fba1b4afa7e341bb5d7217a7f"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "e6cc5d1c76477e8379a859ec77194d1d"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "geometry_msgs/Vector3 						prediction\n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, prediction);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, prediction);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(prediction);
    return size;
  }

  typedef boost::shared_ptr< ::Detector::predictionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Detector::predictionResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct predictionResponse
typedef  ::Detector::predictionResponse_<std::allocator<void> > predictionResponse;

typedef boost::shared_ptr< ::Detector::predictionResponse> predictionResponsePtr;
typedef boost::shared_ptr< ::Detector::predictionResponse const> predictionResponseConstPtr;

struct prediction
{

typedef predictionRequest Request;
typedef predictionResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct prediction
} // namespace Detector

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Detector::predictionRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Detector::predictionRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Detector::predictionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "994972b6e03928b2476860ce6c4c8e17";
  }

  static const char* value(const  ::Detector::predictionRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x994972b6e03928b2ULL;
  static const uint64_t static_value2 = 0x476860ce6c4c8e17ULL;
};

template<class ContainerAllocator>
struct DataType< ::Detector::predictionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Detector/predictionRequest";
  }

  static const char* value(const  ::Detector::predictionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Detector::predictionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string str\n\
\n\
";
  }

  static const char* value(const  ::Detector::predictionRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Detector::predictionResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Detector::predictionResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Detector::predictionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6931b22fba1b4afa7e341bb5d7217a7f";
  }

  static const char* value(const  ::Detector::predictionResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6931b22fba1b4afaULL;
  static const uint64_t static_value2 = 0x7e341bb5d7217a7fULL;
};

template<class ContainerAllocator>
struct DataType< ::Detector::predictionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Detector/predictionResponse";
  }

  static const char* value(const  ::Detector::predictionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Detector::predictionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Vector3 						prediction\n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::Detector::predictionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Detector::predictionResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Detector::predictionRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.str);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct predictionRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Detector::predictionResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.prediction);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct predictionResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<Detector::prediction> {
  static const char* value() 
  {
    return "e6cc5d1c76477e8379a859ec77194d1d";
  }

  static const char* value(const Detector::prediction&) { return value(); } 
};

template<>
struct DataType<Detector::prediction> {
  static const char* value() 
  {
    return "Detector/prediction";
  }

  static const char* value(const Detector::prediction&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<Detector::predictionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e6cc5d1c76477e8379a859ec77194d1d";
  }

  static const char* value(const Detector::predictionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<Detector::predictionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Detector/prediction";
  }

  static const char* value(const Detector::predictionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<Detector::predictionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e6cc5d1c76477e8379a859ec77194d1d";
  }

  static const char* value(const Detector::predictionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<Detector::predictionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Detector/prediction";
  }

  static const char* value(const Detector::predictionResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // DETECTOR_SERVICE_PREDICTION_H

